package mediformapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChildVisitsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildVisitsAllPropertiesEquals(ChildVisits expected, ChildVisits actual) {
        assertChildVisitsAutoGeneratedPropertiesEquals(expected, actual);
        assertChildVisitsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildVisitsAllUpdatablePropertiesEquals(ChildVisits expected, ChildVisits actual) {
        assertChildVisitsUpdatableFieldsEquals(expected, actual);
        assertChildVisitsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildVisitsAutoGeneratedPropertiesEquals(ChildVisits expected, ChildVisits actual) {
        assertThat(expected)
            .as("Verify ChildVisits auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildVisitsUpdatableFieldsEquals(ChildVisits expected, ChildVisits actual) {
        assertThat(expected)
            .as("Verify ChildVisits relevant properties")
            .satisfies(e -> assertThat(e.getVisitID()).as("check visitID").isEqualTo(actual.getVisitID()))
            .satisfies(e -> assertThat(e.getVisitType()).as("check visitType").isEqualTo(actual.getVisitType()))
            .satisfies(e -> assertThat(e.getVisitDate()).as("check visitDate").isEqualTo(actual.getVisitDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildVisitsUpdatableRelationshipsEquals(ChildVisits expected, ChildVisits actual) {
        assertThat(expected)
            .as("Verify ChildVisits relationships")
            .satisfies(e -> assertThat(e.getChild()).as("check child").isEqualTo(actual.getChild()));
    }
}
