package mediformapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChildDataAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildDataAllPropertiesEquals(ChildData expected, ChildData actual) {
        assertChildDataAutoGeneratedPropertiesEquals(expected, actual);
        assertChildDataAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildDataAllUpdatablePropertiesEquals(ChildData expected, ChildData actual) {
        assertChildDataUpdatableFieldsEquals(expected, actual);
        assertChildDataUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildDataAutoGeneratedPropertiesEquals(ChildData expected, ChildData actual) {
        assertThat(expected)
            .as("Verify ChildData auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildDataUpdatableFieldsEquals(ChildData expected, ChildData actual) {
        assertThat(expected)
            .as("Verify ChildData relevant properties")
            .satisfies(e -> assertThat(e.getChildDataID()).as("check childDataID").isEqualTo(actual.getChildDataID()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getDob()).as("check dob").isEqualTo(actual.getDob()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChildDataUpdatableRelationshipsEquals(ChildData expected, ChildData actual) {
        assertThat(expected)
            .as("Verify ChildData relationships")
            .satisfies(e -> assertThat(e.getChild()).as("check child").isEqualTo(actual.getChild()));
    }
}
